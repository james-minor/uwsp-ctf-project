---
import '../styles/global.css';
import * as feather from 'feather-icons';

import HeroContainer from '../components/HeroContainer.astro';

import fetchAPI from '../lib/fetchapi';
import Count from '../interfaces/api/count';

/* Redirecting if malformed response OR there is an existing admin account.
 */
const res = await fetchAPI<Count>('/admin/count');

if (res === undefined)
{
	return new Response(null, {
		status: 500,
		statusText: 'Internal server error.'
	});
}
else if (res.count !== 0)
{
	return Astro.redirect('/');
}

/* Validating the form fields on the backend before POSTing to our API.
 */

// TODO: passwords are going to have a "significant" digit amount of 512 characters. Trim any passwords to that size
// TODO: ensure password meets 10 character, 2 num requirement
// TODO: post user data to the API.

const usernameError: string = '';
const passwordError: string = '';
---

<html lang="en">
    <head>
        <meta charset="utf-8" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        <title>Admin Setup</title>
    </head>
    <body>
        <HeroContainer>
            <form method="post">
                <h1>Let's Get Started</h1>
                <p>Create your first admin account to start modifying your CTF</p>

                <div class="fields-container">
                    <label class="sr-only" for="username">Username:</label>
                    <div class="input-container">
                        <div class="input-container__icon" set:html={ feather.icons.user.toSvg({ stroke: 'white'}) } />
                        <input type="text" name="username" id="username" placeholder="Username" maxlength="30"/>
                    </div>
                    <span class="error" id="username-error">{ usernameError }</span>

                    <label class="sr-only" for="password">Password:</label>
                    <div class="input-container">
                        <div class="input-container__icon" set:html={ feather.icons.lock.toSvg({ stroke: 'white'}) } />
                        <input type="password" name="password" id="password" placeholder="Password"/>
                    </div>
                    <span class="error" id="password-error">{ passwordError }</span>
                </div>

                <input type="submit" value="Create Account">
            </form>
        </HeroContainer>
    </body>
</html>

<script>
    // Client-Side Form Validation.

    const usernameInput = document.getElementById('username');
    const passwordInput = document.getElementById('password');

    const usernameError = document.getElementById('username-error');
    const passwordError = document.getElementById('password-error');

    usernameInput.addEventListener('input', (event: InputEvent) =>
    {
        let data: string = event.target.value;

        if (data.length)
        {
            if (data.length < 3 || data.length > 30)
            {
                setUsernameError('Username must be between 3 and 30 characters')
                return;
            }

            setUsernameError('');
        }

        function setUsernameError(message: string)
        {


            document.getElementById('username-error').innerText = message;
        }
    });

    passwordInput.addEventListener('input', (event: InputEvent) =>
    {
        let data: string = event.target.value;

        if (data.length)
        {
            if (data.length < 10)
            {
                setPasswordError('Password must be at least 10 characters long');
                return;
            }

            let totalNumbers: number = 0;
            for (let i = 0; i < data.length; i++)
            {
                if (!isNaN(parseInt(data[i])))
                {
                    totalNumbers++;
                }
            }

            if (totalNumbers < 2)
            {
                setPasswordError('Password must contain at least 2 numbers');
                return;
            }

            setPasswordError('');
        }

        function setPasswordError(message: string)
        {
            document.getElementById('password-error').innerText = message;
        }
    });



</script>

<style>
	form {
		background-color: var(--col-body-light);

		border-radius: 10px;

        -webkit-box-shadow: 0 0 25px 0 rgba(0, 0, 0, 0.65);
        -moz-box-shadow: 0 0 25px 0 rgba(0, 0, 0, 0.65);
        box-shadow: 0 0 25px 0 rgba(0, 0, 0, 0.65);

        display: flex;
        flex-direction: column;
	}

    h1 {
        font-weight: bold;
        font-size: 2.25rem;
        text-align: center;

        margin-top: 2.5rem;
        margin-bottom: 0.25rem;
    }

    p {
        padding-left: 20%;
        padding-right: 20%;
        text-align: center;
    }

    .requirements {
        font-size: 0.75rem;

        padding: 0.25rem;

        margin-top: 0.5rem;
        margin-bottom: 0.5rem;

        border-top-color: currentColor;
        border-top-style: solid;
        border-top-width: 0.2rem;

        border-radius: 0.125rem;
    }

    .error {
        color: var(--col-accent-red);
        height: 0.75rem;
        font-size: 0.75rem;

        margin-top: 0.2rem;
        margin-bottom: 1rem;
    }

    .fields-container {
        padding: 2.5rem 4rem;

        display: flex;
        flex-direction: column;
    }

    label {
        margin-bottom: 0.25rem;
    }

    input[type="submit"] {
        background-color: var(--col-main-gold);
        color: black;

        cursor: pointer;

        outline: none;
        border: none;

        border-bottom-left-radius: 10px;
        border-bottom-right-radius: 10px;

        padding: 1rem;

        transition: background-color 0.3s;

        text-transform: uppercase;
    }

    input[type="submit"]:focus-visible,
    input[type="submit"]:hover {
        background-color: #ffb700;
    }

    .input-container {
        display: grid;
        grid-template-columns: auto 1fr;
        grid-template-rows: 1fr;


        border-style: solid;
        border-width: thin;
        border-color: black;
    }

    .input-container input {
        outline: none;
        border: none;
    }

    .input-container__icon {
        background-color: var(--col-main-purple);
        padding: 0.5rem;

        aspect-ratio: 1;

        display: flex;
        align-items: center;
        justify-content: center;
    }

    .input-container:focus-within {
        border-color: var(--col-accent-violet-nt);
        outline: var(--col-accent-violet-nt) solid thin;
    }
</style>