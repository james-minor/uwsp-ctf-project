---
import '../styles/global.css';
import * as feather from 'feather-icons';

import HeroContainer from '../components/HeroContainer.astro';

import fetchAPI from '../lib/fetchapi';
import Count from '../interfaces/api/count';
import FormField from '../components/FormField.astro';

/* Redirecting if malformed response OR there is an existing admin account.
 */
const res = await fetchAPI<Count>('/admin/count');

if (res === undefined)
{
	return new Response(null, {
		status: 500,
		statusText: 'Internal server error.'
	});
}
else if (res.count !== 0)
{
	return Astro.redirect('/');
}

/* Validating the form fields on the backend before POSTing to our API.
 */
let usernameError: string = '';
let passwordError: string = '';

if (Astro.request.method === 'POST')
{
    try
    {
        /* Gathering form data.
         */

        const data = await Astro.request.formData();
        const username = data.get('username');
        const password = data.get('password');

        /* Validating the username field.
         */

        if (typeof username !== 'string')
        {
            return;
        }

        if (username.length < 3)
        {
            usernameError = 'Username must be at least 3 characters';
        }

        if (username.length > 30)
        {
            usernameError = 'Username must be less than 30 characters';
        }

        /* Validating the password field.
         */

        if (typeof password !== 'string')
        {
            return;
        }

        if (password.length < 10)
        {
            passwordError = 'Password must be at least 10 characters long';
        }

        /* POSTing user data to the REST API.
         */
        if (usernameError == '' && passwordError == '')
        {
            // TODO: post to database, create the user, and redirect to admin dashboard.
        }
    }
    catch (error)
    {
        return new Response(null, {
            status: 500,
            statusText: 'Internal server error.'
        });
    }
}

---

<html lang="en">
    <head>
        <meta charset="utf-8" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        <title>Admin Setup</title>
    </head>
    <body>
        <HeroContainer>
            <form method="post">
                <h1>Let's Get Started</h1>
                <p>Create your first admin account to start modifying your CTF</p>

                <div class="fields-container">
                    <FormField
                        name="username"
                        type="text"
                        minLength={ 3 }
                        maxLength={ 30 }
                        icon={ feather.icons.user }
                        iconOptions={{ stroke: 'white' }}
                        error={ usernameError }
                    />
                    <FormField
                        name="password"
                        type="password"
                        minLength={ 10 }
                        icon={ feather.icons.lock }
                        iconOptions={{ stroke: 'white' }}
                        error={ passwordError }
                    />
                </div>

                <input type="submit" value="Create Account">
            </form>
        </HeroContainer>
    </body>
</html>

<style>
	form {
		background-color: var(--col-body-light);

		border-radius: 10px;

        -webkit-box-shadow: 0 0 25px 0 rgba(0, 0, 0, 0.65);
        -moz-box-shadow: 0 0 25px 0 rgba(0, 0, 0, 0.65);
        box-shadow: 0 0 25px 0 rgba(0, 0, 0, 0.65);

        display: flex;
        flex-direction: column;
	}

    h1 {
        font-weight: bold;
        font-size: 2.25rem;
        text-align: center;

        margin-top: 2.5rem;
        margin-bottom: 0.25rem;
    }

    p {
        padding-left: 20%;
        padding-right: 20%;
        text-align: center;
    }

    .fields-container {
        padding: 2.5rem 4rem;

        display: flex;
        flex-direction: column;
    }


    input[type="submit"] {
        background-color: var(--col-main-gold);
        color: black;

        cursor: pointer;

        outline: none;
        border: none;

        border-bottom-left-radius: 10px;
        border-bottom-right-radius: 10px;

        padding: 1rem;

        transition: background-color 0.3s;

        text-transform: uppercase;
    }

    input[type="submit"]:focus-visible,
    input[type="submit"]:hover {
        background-color: #ffb700;
    }
</style>