datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

generator client {
	provider      = "prisma-client-js"
	binaryTargets = ["native", "windows", "linux-musl"]
}

enum Role {
	USER
	ADMIN
}

model User {
	id            Int            @id @default(autoincrement())
	email         String         @unique @db.VarChar(75)
	username      String         @unique @db.VarChar(30)
	passwordHash  String         @db.Char(60)
	role          Role           @default(USER)
	team          Team?          @relation(fields: [teamId], references: [id], onDelete: Cascade)
	teamId        Int?
	announcements Announcement[]
	session       Session?

	@@map("users")
}

model Session {
	id            Int      @id @default(autoincrement())
	key           String   @unique @db.Char(48)
	creationDate  DateTime @default(now())
	maxAgeSeconds Int      @default(86400)
	user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
	userId        Int      @unique

	@@map("sessions")
}

model Announcement {
	id           Int      @id @default(autoincrement())
	creationDate DateTime @default(now())
	author       User     @relation(fields: [authorId], references: [id])
	authorId     Int
	body         String   @db.VarChar(1000)

	@@map("announcements")
}

model Wave {
	id          Int         @id @default(autoincrement())
	releaseDate DateTime
	challenges  Challenge[]

	@@map("waves")
}

model Category {
	id         Int         @id @default(autoincrement())
	title      String      @unique @db.VarChar(15)
	challenges Challenge[]

	@@map("categories")
}

model Challenge {
	id          Int          @id @default(autoincrement())
	category    Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
	categoryId  Int?
	wave        Wave?        @relation(fields: [waveId], references: [id], onDelete: SetNull)
	waveId      Int?
	value       Int          @default(0)
	title       String       @unique @db.VarChar(30)
	body        String       @db.VarChar(750)
	attachments Attachment[]
	captures    Capture[]
	flag        String

	@@map("challenges")
}

model Attachment {
	id          Int       @id @default(autoincrement())
	title       String    @db.VarChar(30)
	source      String
	challenge   Challenge @relation(fields: [challengeId], references: [id])
	challengeId Int

	@@map("attachments")
}

model Team {
	id         Int       @id @default(autoincrement())
	name       String    @unique @db.VarChar(40)
	inviteCode String    @unique @db.Char(8)
	users      User[]
	captures   Capture[]

	@@map("teams")
}

model Capture {
	id          Int       @id @default(autoincrement())
	team        Team      @relation(fields: [teamId], references: [id])
	teamId      Int
	challenge   Challenge @relation(fields: [challengeId], references: [id])
	challengeId Int
	solveDate   DateTime  @default(now())

	@@map("captures")
}
